<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Emoji Town MVP</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .game-container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .header h1 {
            color: #333;
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }

        .stats-bar {
            display: flex;
            justify-content: space-around;
            background: #f8f9fa;
            padding: 15px;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: inset 0 2px 10px rgba(0,0,0,0.1);
        }

        .stat {
            text-align: center;
        }

        .stat-value {
            font-size: 1.5em;
            font-weight: bold;
            color: #667eea;
        }

        .stat-label {
            font-size: 0.9em;
            color: #666;
            margin-top: 5px;
        }

        .pack-section {
            margin-bottom: 40px;
        }

        .pack-container {
            text-align: center;
            margin-bottom: 30px;
        }

        .pack-unopened {
            width: 200px;
            height: 280px;
            background: linear-gradient(45deg, #ff6b6b, #ff8e8e);
            border-radius: 20px;
            margin: 0 auto 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 4em;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 10px 30px rgba(255, 107, 107, 0.3);
            position: relative;
            overflow: hidden;
        }

        .pack-unopened:hover {
            transform: translateY(-10px) scale(1.05);
            box-shadow: 0 20px 40px rgba(255, 107, 107, 0.4);
        }

        .pack-unopened::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            transition: left 0.5s;
        }

        .pack-unopened:hover::before {
            left: 100%;
        }

        .open-pack-btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.2em;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
        }

        .open-pack-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .pack-grid {
            display: grid;
            grid-template-columns: repeat(10, 1fr);
            gap: 8px;
            max-width: 600px;
            margin: 0 auto;
            background: #f8f9fa;
            padding: 20px;
            border-radius: 15px;
            box-shadow: inset 0 2px 10px rgba(0,0,0,0.1);
        }

        .emoji-slot {
            aspect-ratio: 1;
            background: white;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.8em;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            position: relative;
        }

        .emoji-slot:hover {
            transform: scale(1.1);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            z-index: 1;
        }

        .emoji-slot.revealed {
            animation: flipIn 0.6s ease forwards;
        }

        @keyframes flipIn {
            0% {
                transform: rotateY(180deg);
                opacity: 0;
            }
            100% {
                transform: rotateY(0deg);
                opacity: 1;
            }
        }

        .collection-section {
            margin-top: 40px;
        }

        .collection-categories {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .category {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .category h3 {
            color: #333;
            margin-bottom: 15px;
            text-align: center;
            padding-bottom: 10px;
            border-bottom: 2px solid #667eea;
        }

        .emoji-collection {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: center;
        }

        .collected-emoji {
            font-size: 2em;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 10px;
            transition: transform 0.2s ease;
            position: relative;
        }

        .collected-emoji:hover {
            transform: scale(1.2);
        }

        .emoji-count {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #667eea;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 0.6em;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .combination-demo {
            background: linear-gradient(135deg, #ffeaa7, #fab1a0);
            border-radius: 15px;
            padding: 20px;
            margin-top: 30px;
            text-align: center;
        }

        .combination-demo h3 {
            color: #333;
            margin-bottom: 15px;
        }

        .zwj-example {
            font-size: 3em;
            margin: 10px;
            padding: 15px;
            background: rgba(255,255,255,0.8);
            border-radius: 10px;
            display: inline-block;
        }

        .loading {
            text-align: center;
            font-size: 1.2em;
            color: #667eea;
            margin: 20px 0;
        }

        .new-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #ff6b6b;
            color: white;
            border-radius: 50%;
            width: 15px;
            height: 15px;
            font-size: 0.7em;
            display: flex;
            align-items: center;
            justify-content: center;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.2); }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="header">
            <h1>üèòÔ∏è Emoji Town MVP</h1>
            <p>Collect emoji components and create amazing ZWJ combinations!</p>
        </div>

        <div class="stats-bar">
            <div class="stat">
                <div class="stat-value" id="packsOpened">0</div>
                <div class="stat-label">Packs Opened</div>
            </div>
            <div class="stat">
                <div class="stat-value" id="totalEmojis">0</div>
                <div class="stat-label">Total Collected</div>
            </div>
            <div class="stat">
                <div class="stat-value" id="uniqueEmojis">0</div>
                <div class="stat-label">Unique Types</div>
            </div>
            <div class="stat">
                <div class="stat-value" id="combinations">0</div>
                <div class="stat-label">ZWJ Combos</div>
            </div>
        </div>

        <div class="pack-section">
            <div class="pack-container">
                <div class="pack-unopened" id="packContainer">
                    üì¶
                </div>
                <button class="open-pack-btn" id="openPackBtn">Open Emoji Pack!</button>
            </div>

            <div id="packGrid" class="pack-grid" style="display: none;"></div>
        </div>

        <div class="collection-section">
            <h2 style="text-align: center; color: #333; margin-bottom: 20px;">Your Collection</h2>
            <div class="collection-categories">
                <div class="category">
                    <h3>üë• People</h3>
                    <div class="emoji-collection" id="peopleCollection"></div>
                </div>
                <div class="category">
                    <h3>üé® Skin Tones</h3>
                    <div class="emoji-collection" id="skinTonesCollection"></div>
                </div>
                <div class="category">
                    <h3>üíº Professions</h3>
                    <div class="emoji-collection" id="professionsCollection"></div>
                </div>
                <div class="category">
                    <h3>‚ú® Wildcards</h3>
                    <div class="emoji-collection" id="wildcardsCollection"></div>
                </div>
                <div class="category">
                    <h3>üéØ Objects</h3>
                    <div class="emoji-collection" id="objectsCollection"></div>
                </div>
            </div>
        </div>

        <div class="combination-demo">
            <h3>üîÆ ZWJ Magic Preview</h3>
            <p>Combine your collected emojis to create amazing families and professionals!</p>
            <div id="combinationExamples"></div>
        </div>
    </div>

    <script>
        // Game state
        let gameState = {
            packsOpened: 0,
            collection: {
                people: {},
                skinTones: {},
                professions: {},
                wildcards: {},
                objects: {}
            },
            combinations: []
        };

        // Emoji categories with proper Unicode handling
        const emojiCategories = {
            people: ['üë®', 'üë©', 'üßë', 'üë∂', 'üßí', 'üë¶', 'üëß', 'üë¥', 'üëµ'],
            skinTones: ['üèª', 'üèº', 'üèΩ', 'üèæ', 'üèø'],
            professions: ['üç≥', 'üöí', 'üëÆ', '‚öïÔ∏è', 'üè´', 'üíº', 'üîß', '‚úàÔ∏è', 'üé®', 'üìö'],
            wildcards: ['‚ù§Ô∏è', 'üíï', 'ü•∞', '‚ú®'],
            objects: ['üêï', 'üê±', 'üè†', 'üöó', '‚öΩ', 'üé∏', 'üì±', 'üå≥', 'üé≠', 'üé™', 'üé®', 'üéØ', 'üé≤', 'üé≥']
        };

        // ZWJ combination examples (subset of real Unicode combinations)
        const zjwCombinations = [
            'üë®üèΩ‚Äçüç≥', 'üë©üèª‚Äç‚öïÔ∏è', 'üë®üèø‚Äçüöí', 'üë©üèº‚Äç‚úàÔ∏è',
            'üë®‚Äçüë©‚Äçüëß', 'üë®‚Äçüë®‚Äçüë¶', 'üë©‚Äçüë©‚Äçüëß‚Äçüë¶',
            'üë®‚Äç‚ù§Ô∏è‚Äçüë®', 'üë©‚Äç‚ù§Ô∏è‚Äçüë®', 'üë©‚Äç‚ù§Ô∏è‚Äçüë©'
        ];

        function generatePack() {
            const pack = [];
            const guaranteedCounts = {
                people: 2,
                skinTones: 2,
                professions: 2,
                wildcards: 2
            };

            // Add guaranteed emojis
            Object.keys(guaranteedCounts).forEach(category => {
                const categoryEmojis = emojiCategories[category];
                for (let i = 0; i < guaranteedCounts[category]; i++) {
                    const randomEmoji = categoryEmojis[Math.floor(Math.random() * categoryEmojis.length)];
                    pack.push({ emoji: randomEmoji, category });
                }
            });

            // Fill remaining slots randomly
            while (pack.length < 100) {
                const categories = Object.keys(emojiCategories);
                const randomCategory = categories[Math.floor(Math.random() * categories.length)];
                const categoryEmojis = emojiCategories[randomCategory];
                const randomEmoji = categoryEmojis[Math.floor(Math.random() * categoryEmojis.length)];
                pack.push({ emoji: randomEmoji, category: randomCategory });
            }

            // Shuffle the pack
            return pack.sort(() => Math.random() - 0.5);
        }

        function addToCollection(emoji, category) {
            if (!gameState.collection[category][emoji]) {
                gameState.collection[category][emoji] = 0;
            }
            gameState.collection[category][emoji]++;
        }

        function updateStats() {
            document.getElementById('packsOpened').textContent = gameState.packsOpened;
            
            let totalEmojis = 0;
            let uniqueEmojis = 0;
            
            Object.keys(gameState.collection).forEach(category => {
                Object.keys(gameState.collection[category]).forEach(emoji => {
                    totalEmojis += gameState.collection[category][emoji];
                    uniqueEmojis++;
                });
            });

            document.getElementById('totalEmojis').textContent = totalEmojis;
            document.getElementById('uniqueEmojis').textContent = uniqueEmojis;
            document.getElementById('combinations').textContent = gameState.combinations.length;
        }

        function updateCollectionDisplay() {
            Object.keys(gameState.collection).forEach(category => {
                const container = document.getElementById(category + 'Collection');
                container.innerHTML = '';
                
                Object.keys(gameState.collection[category]).forEach(emoji => {
                    const count = gameState.collection[category][emoji];
                    const emojiDiv = document.createElement('div');
                    emojiDiv.className = 'collected-emoji';
                    emojiDiv.textContent = emoji;
                    
                    if (count > 1) {
                        const countBadge = document.createElement('div');
                        countBadge.className = 'emoji-count';
                        countBadge.textContent = count;
                        emojiDiv.appendChild(countBadge);
                    }
                    
                    container.appendChild(emojiDiv);
                });
            });
        }

        function updateCombinationExamples() {
            const container = document.getElementById('combinationExamples');
            container.innerHTML = '';
            
            // Show some example combinations based on collected emojis
            const examples = zjwCombinations.slice(0, 5);
            examples.forEach(combo => {
                const comboDiv = document.createElement('div');
                comboDiv.className = 'zwj-example';
                comboDiv.textContent = combo;
                comboDiv.title = 'ZWJ Sequence: ' + combo;
                container.appendChild(comboDiv);
            });
        }

        function openPack() {
            const packContainer = document.getElementById('packContainer');
            const openBtn = document.getElementById('openPackBtn');
            const packGrid = document.getElementById('packGrid');

            // Disable button and show loading
            openBtn.disabled = true;
            openBtn.textContent = 'Opening...';
            packContainer.style.transform = 'scale(0.8)';
            packContainer.style.opacity = '0.5';

            setTimeout(() => {
                // Generate pack contents
                const pack = generatePack();
                gameState.packsOpened++;

                // Hide pack, show grid
                packContainer.style.display = 'none';
                packGrid.style.display = 'grid';
                packGrid.innerHTML = '';

                // Create grid slots
                pack.forEach((item, index) => {
                    const slot = document.createElement('div');
                    slot.className = 'emoji-slot';
                    slot.style.animationDelay = (index * 0.05) + 's';
                    
                    setTimeout(() => {
                        slot.textContent = item.emoji;
                        slot.classList.add('revealed');
                        addToCollection(item.emoji, item.category);
                        
                        // Add new badge for first-time emojis
                        if (gameState.collection[item.category][item.emoji] === 1) {
                            const badge = document.createElement('div');
                            badge.className = 'new-badge';
                            badge.textContent = '!';
                            slot.appendChild(badge);
                        }
                        
                        updateStats();
                        updateCollectionDisplay();
                    }, index * 50);
                    
                    packGrid.appendChild(slot);
                });

                // Reset for next pack after animation
                setTimeout(() => {
                    packContainer.style.display = 'flex';
                    packContainer.style.transform = 'scale(1)';
                    packContainer.style.opacity = '1';
                    packGrid.style.display = 'none';
                    openBtn.disabled = false;
                    openBtn.textContent = 'Open Another Pack!';
                    updateCombinationExamples();
                }, 8000);
            }, 1000);
        }

        // Event listeners
        document.getElementById('openPackBtn').addEventListener('click', openPack);

        // Initialize display
        updateStats();
        updateCollectionDisplay();
        updateCombinationExamples();

        // Add some sample data for demo
        setTimeout(() => {
            // Pre-populate with some emojis for demo
            addToCollection('üë®', 'people');
            addToCollection('üë©', 'people');
            addToCollection('üèΩ', 'skinTones');
            addToCollection('üç≥', 'professions');
            updateStats();
            updateCollectionDisplay();
        }, 500);
    </script>
</body>
</html>